// front/src/services/questionsService.js - CORRE√á√ÉO E MELHORIAS
import api from './api';

export const questionsService = {
  // Buscar perguntas de um an√∫ncio
  async getAdQuestions(adId) {
    try {
      console.log('üîç Buscando perguntas para an√∫ncio:', adId);

      if (!adId) {
        throw new Error('ID do an√∫ncio √© obrigat√≥rio');
      }

      const response = await api.get(`/ad-questions/ad/${adId}/questions`);

      console.log('üì• Resposta das perguntas:', response.data);

      return {
        success: response.data.success || true,
        data: response.data.data || response.data,
        message: response.data.message || 'Perguntas carregadas'
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar perguntas:', error);

      return {
        success: false,
        message: error.response?.data?.message || error.message || 'Erro ao carregar perguntas',
        data: { questions: [] }
      };
    }
  },

  // Fazer uma pergunta
  async askQuestion(adId, question, isPublic = true) {
    try {
      console.log('üì§ Enviando pergunta:', { adId, question, isPublic });

      if (!adId || !question) {
        throw new Error('ID do an√∫ncio e pergunta s√£o obrigat√≥rios');
      }

      if (question.trim().length < 10) {
        throw new Error('Pergunta deve ter pelo menos 10 caracteres');
      }

      const requestData = {
        question: question.trim(),
        is_public: isPublic
      };

      console.log('üì¶ Dados da requisi√ß√£o:', requestData);

      const response = await api.post(`/ad-questions/ad/${adId}/question`, requestData);

      console.log('üì• Resposta do envio:', response.data);

      return {
        success: response.data.success || true,
        data: response.data.data || response.data,
        message: response.data.message || 'Pergunta enviada com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao enviar pergunta:', error);

      // Log detalhado do erro
      if (error.response) {
        console.error('Dados da resposta de erro:', error.response.data);
        console.error('Status do erro:', error.response.status);
      }

      return {
        success: false,
        message: error.response?.data?.message || error.message || 'Erro ao enviar pergunta'
      };
    }
  },

  // Responder uma pergunta
  async answerQuestion(questionId, answer) {
    try {
      console.log('üì§ Enviando resposta:', { questionId, answer });

      if (!questionId || !answer) {
        throw new Error('ID da pergunta e resposta s√£o obrigat√≥rios');
      }

      if (answer.trim().length < 5) {
        throw new Error('Resposta deve ter pelo menos 5 caracteres');
      }

      const requestData = {
        answer: answer.trim()
      };

      const response = await api.post(`/ad-questions/question/${questionId}/answer`, requestData);

      console.log('üì• Resposta do envio da resposta:', response.data);

      return {
        success: response.data.success || true,
        data: response.data.data || response.data,
        message: response.data.message || 'Resposta enviada com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao enviar resposta:', error);

      return {
        success: false,
        message: error.response?.data?.message || error.message || 'Erro ao enviar resposta'
      };
    }
  },

  // Deletar uma pergunta
  async deleteQuestion(questionId) {
    try {
      console.log('üóëÔ∏è Deletando pergunta:', questionId);

      if (!questionId) {
        throw new Error('ID da pergunta √© obrigat√≥rio');
      }

      const response = await api.delete(`/ad-questions/question/${questionId}`);

      console.log('üì• Resposta da dele√ß√£o:', response.data);

      return {
        success: response.data.success || true,
        message: response.data.message || 'Pergunta deletada com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao deletar pergunta:', error);

      return {
        success: false,
        message: error.response?.data?.message || error.message || 'Erro ao deletar pergunta'
      };
    }
  },

  // Alterar visibilidade da pergunta
  async toggleQuestionVisibility(questionId) {
    try {
      console.log('üëÅÔ∏è Alterando visibilidade:', questionId);

      if (!questionId) {
        throw new Error('ID da pergunta √© obrigat√≥rio');
      }

      const response = await api.put(`/ad-questions/question/${questionId}/visibility`);

      console.log('üì• Resposta da altera√ß√£o:', response.data);

      return {
        success: response.data.success || true,
        data: response.data.data || response.data,
        message: response.data.message || 'Visibilidade alterada com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao alterar visibilidade:', error);

      return {
        success: false,
        message: error.response?.data?.message || error.message || 'Erro ao alterar visibilidade'
      };
    }
  },

  // Buscar perguntas do usu√°rio
  async getUserQuestions(type = 'asked') {
    try {
      console.log('üîç Buscando perguntas do usu√°rio:', type);

      if (!['asked', 'answered'].includes(type)) {
        throw new Error('Tipo deve ser "asked" ou "answered"');
      }

      const response = await api.get(`/ad-questions/user/questions?type=${type}`);

      console.log('üì• Perguntas do usu√°rio:', response.data);

      return {
        success: response.data.success || true,
        data: response.data.data || response.data,
        message: response.data.message || 'Perguntas carregadas'
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar perguntas do usu√°rio:', error);

      return {
        success: false,
        message: error.response?.data?.message || error.message || 'Erro ao carregar perguntas',
        data: { questions: [] }
      };
    }
  },

  // Buscar perguntas dos meus an√∫ncios
  async getMyAdQuestions(params = {}) {
    try {
      console.log('üîç Buscando perguntas dos meus an√∫ncios:', params);

      const response = await api.get('/ad-questions/my-questions', { params });

      console.log('üì• Perguntas dos meus an√∫ncios:', response.data);

      return {
        success: response.data.success || true,
        data: response.data.data || response.data,
        message: response.data.message || 'Perguntas carregadas'
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar perguntas dos meus an√∫ncios:', error);

      return {
        success: false,
        message: error.response?.data?.message || error.message || 'Erro ao carregar perguntas',
        data: { questions: [] }
      };
    }
  },

  // Fun√ß√£o de debug para verificar conectividade
  async debugConnection() {
    try {
      console.log('üîß Testando conex√£o com API de perguntas...');

      // Fazer uma requisi√ß√£o simples para testar
      const response = await api.get('/health');

      console.log('‚úÖ Conex√£o OK:', response.data);

      return {
        success: true,
        message: 'Conex√£o estabelecida',
        data: response.data
      };
    } catch (error) {
      console.error('‚ùå Falha na conex√£o:', error);

      return {
        success: false,
        message: 'Falha na conex√£o com a API',
        error: error.message
      };
    }
  },

  // Validar dados antes de enviar
  validateQuestionData(question, isPublic) {
    const errors = [];

    if (!question || typeof question !== 'string') {
      errors.push('Pergunta deve ser um texto v√°lido');
    } else {
      const trimmed = question.trim();
      if (trimmed.length < 10) {
        errors.push('Pergunta deve ter pelo menos 10 caracteres');
      }
      if (trimmed.length > 500) {
        errors.push('Pergunta n√£o pode ter mais de 500 caracteres');
      }
    }

    if (typeof isPublic !== 'boolean') {
      errors.push('Visibilidade deve ser verdadeiro ou falso');
    }

    return {
      isValid: errors.length === 0,
      errors,
      data: {
        question: question?.trim(),
        is_public: isPublic
      }
    };
  },

  // Validar dados da resposta
  validateAnswerData(answer) {
    const errors = [];

    if (!answer || typeof answer !== 'string') {
      errors.push('Resposta deve ser um texto v√°lido');
    } else {
      const trimmed = answer.trim();
      if (trimmed.length < 5) {
        errors.push('Resposta deve ter pelo menos 5 caracteres');
      }
      if (trimmed.length > 1000) {
        errors.push('Resposta n√£o pode ter mais de 1000 caracteres');
      }
    }

    return {
      isValid: errors.length === 0,
      errors,
      data: {
        answer: answer?.trim()
      }
    };
  }
};